version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: blog_admin_postgres
    environment:
      POSTGRES_DB: blog_admin
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - blog_admin_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: blog_admin_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - blog_admin_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO for S3-compatible storage (development)
  minio:
    image: minio/minio:latest
    container_name: blog_admin_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - blog_admin_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: blog_admin_api
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/blog_admin?schema=public
      REDIS_HOST: redis
      REDIS_PORT: 6379
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY_ID: minioadmin
      S3_SECRET_ACCESS_KEY: minioadmin
      S3_BUCKET: blog-admin
      S3_REGION: us-east-1
      JWT_SECRET: your-super-secret-jwt-key-here-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-here-change-in-production
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - blog_admin_network
    command: npm run start:dev

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: blog_admin_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - blog_admin_network

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  blog_admin_network:
    driver: bridge
